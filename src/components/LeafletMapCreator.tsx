// components/LeafletMapCreator.tsx
'use client'

import { useEffect, useRef, useState } from 'react'
import L from 'leaflet'
import 'leaflet/dist/leaflet.css'
import type { Building, RoutePoint } from '../types/building'

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∏–∫–æ–Ω–∫–∞–º–∏ Leaflet
delete (L.Icon.Default.prototype as any)._getIconUrl
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
})

interface LeafletMapCreatorProps {
  buildings: Building[]
  routePoints: RoutePoint[]
  isAddingPoint: boolean
  onAddBuildingPoint: (building: Building) => void
  onAddCustomPoint: (lat: number, lng: number) => void
}

const MAP_STYLES = {
  light: {
    name: 'CartoDB Light',
    url: 'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png',
    attribution: '¬© OpenStreetMap, ¬© CartoDB'
  },
  osm: {
    name: 'OpenStreetMap',
    url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
    attribution: '¬© OpenStreetMap contributors'
  },
  dark: {
    name: 'CartoDB Dark',
    url: 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png',
    attribution: '¬© OpenStreetMap, ¬© CartoDB'
  }
}

export default function LeafletMapCreator({ 
  buildings, 
  routePoints, 
  isAddingPoint, 
  onAddBuildingPoint, 
  onAddCustomPoint 
}: LeafletMapCreatorProps) {
  const mapRef = useRef<HTMLDivElement>(null)
  const mapInstance = useRef<L.Map | null>(null)
  const markersLayer = useRef<L.LayerGroup | null>(null)
  const routeMarkersLayer = useRef<L.LayerGroup | null>(null)
  const routeLayer = useRef<L.Polyline | null>(null)
  const [currentStyle, setCurrentStyle] = useState('light')
  const [mapReady, setMapReady] = useState(false)

  // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  useEffect(() => {
    if (!mapRef.current || mapInstance.current) return

    console.log('üó∫Ô∏è Initializing map...')

    const map = L.map(mapRef.current).setView([52.5200, 13.4050], 13)

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–ª—ã
    const initialStyle = MAP_STYLES[currentStyle as keyof typeof MAP_STYLES]
    L.tileLayer(initialStyle.url, {
      attribution: initialStyle.attribution,
      maxZoom: 19
    }).addTo(map)

    // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∏
    const buildingsLayer = L.layerGroup().addTo(map)
    const routeLayer = L.layerGroup().addTo(map)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
    mapInstance.current = map
    markersLayer.current = buildingsLayer
    routeMarkersLayer.current = routeLayer

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ –æ—Ç–º–µ—á–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    setTimeout(() => {
      map.invalidateSize()
      setMapReady(true)
      console.log('‚úÖ Map ready!')
    }, 200)

    return () => {
      if (mapInstance.current) {
        mapInstance.current.remove()
        mapInstance.current = null
        markersLayer.current = null
        routeMarkersLayer.current = null
        setMapReady(false)
      }
    }
  }, [])

  // 2. –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç isAddingPoint)
  useEffect(() => {
    if (!mapInstance.current) return

    console.log('üñ±Ô∏è Updating click handler, isAddingPoint:', isAddingPoint)

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    mapInstance.current.off('click')

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    mapInstance.current.on('click', (e: L.LeafletMouseEvent) => {
      console.log('üéØ Map clicked, isAddingPoint:', isAddingPoint)
      if (isAddingPoint) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –Ω–µ –ø–æ –º–∞—Ä–∫–µ—Ä—É
        const target = e.originalEvent.target as HTMLElement
        const isMarkerClick = target.closest('.building-marker') || target.closest('.route-point-marker')
        
        if (!isMarkerClick) {
          console.log('üéØ Adding custom point at:', e.latlng)
          onAddCustomPoint(e.latlng.lat, e.latlng.lng)
        }
      }
    })
  }, [isAddingPoint, onAddCustomPoint])

  // 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –∑–¥–∞–Ω–∏–π (–ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã)
  useEffect(() => {
    if (!mapReady || !markersLayer.current) {
      console.log('‚è≥ Map not ready for building markers')
      return
    }

    console.log('üè¢ Adding building markers:', buildings.length)

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    markersLayer.current.clearLayers()

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∑–¥–∞–Ω–∏–π
    buildings.forEach((building, index) => {
      console.log(`üìç Creating marker ${index + 1}:`, building.name)

      const marker = L.marker([building.latitude, building.longitude], {
        icon: L.divIcon({
          className: 'building-marker',
          html: `<div class="w-6 h-6 bg-blue-500 rounded-full border-2 border-white shadow-lg flex items-center justify-center cursor-pointer hover:bg-blue-600 transition-colors">
                   <div class="w-2 h-2 bg-white rounded-full"></div>
                 </div>`,
          iconSize: [24, 24],
          iconAnchor: [12, 12]
        })
      })

      // –ü–æ–ø–∞–ø
      marker.bindPopup(`
        <div style="min-width: 200px;">
          <h4 style="margin: 0 0 8px 0; font-size: 14px; font-weight: bold;">
            ${building.name}
          </h4>
          <p style="margin: 4px 0; font-size: 12px;">
            <strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä:</strong> ${building.architect}
          </p>
          <p style="margin: 4px 0; font-size: 12px;">
            <strong>–ì–æ–¥:</strong> ${building.year_built}
          </p>
          <div style="margin-top: 8px;">
            <button onclick="window.addBuilding${building.id}()" style="
              padding: 6px 12px; 
              background: #3b82f6; 
              color: white; 
              border: none; 
              border-radius: 4px; 
              cursor: pointer;
              font-size: 12px;
            ">
              –î–æ–±–∞–≤–∏—Ç—å –≤ –º–∞—Ä—à—Ä—É—Ç
            </button>
          </div>
        </div>
      `, {
        maxWidth: 250
      })

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
      marker.on('click', (e) => {
        if (isAddingPoint) {
          L.DomEvent.stopPropagation(e)
          console.log('üèõÔ∏è Adding building:', building.name)
          onAddBuildingPoint(building)
        }
      })

      // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ –ø–æ–ø–∞–ø–µ
      ;(window as any)[`addBuilding${building.id}`] = () => {
        console.log('üèõÔ∏è Adding building from popup:', building.name)
        onAddBuildingPoint(building)
        marker.closePopup()
      }

      markersLayer.current?.addLayer(marker)
    })

    console.log('‚úÖ Building markers added:', markersLayer.current.getLayers().length)
  }, [mapReady, buildings, isAddingPoint, onAddBuildingPoint])

  // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
  useEffect(() => {
    if (!mapReady || !routeMarkersLayer.current) return

    console.log('üõ§Ô∏è Updating route markers:', routePoints.length)

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã –º–∞—Ä—à—Ä—É—Ç–∞
    routeMarkersLayer.current.clearLayers()

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ª–∏–Ω–∏—é
    if (routeLayer.current && mapInstance.current) {
      mapInstance.current.removeLayer(routeLayer.current)
      routeLayer.current = null
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
    routePoints.forEach((point, index) => {
      const marker = L.marker([point.latitude, point.longitude], {
        icon: L.divIcon({
          className: 'route-point-marker',
          html: `<div class="w-8 h-8 bg-green-500 rounded-full border-2 border-white shadow-lg flex items-center justify-center text-white font-bold text-sm">
                   ${index + 1}
                 </div>`,
          iconSize: [32, 32],
          iconAnchor: [16, 16]
        })
      })

      marker.bindPopup(`
        <div style="padding: 8px;">
          <h4 style="margin: 0 0 4px 0; font-size: 14px; font-weight: bold;">
            ${point.title}
          </h4>
          ${point.description ? `<p style="margin: 0; font-size: 12px; color: #666;">${point.description}</p>` : ''}
        </div>
      `)

      routeMarkersLayer.current?.addLayer(marker)
    })

    // –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞
    if (routePoints.length > 1 && mapInstance.current) {
      const coordinates: L.LatLngTuple[] = routePoints.map(point => [point.latitude, point.longitude])
      routeLayer.current = L.polyline(coordinates, {
        color: '#10b981',
        weight: 4,
        opacity: 0.8,
        dashArray: '10, 5'
      }).addTo(mapInstance.current)

      // –ù–ï –ø–æ–¥–≥–æ–Ω—è–µ–º –∫–∞—Ä—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç –º–∞—Å—à—Ç–∞–±
      console.log('üõ§Ô∏è Route line drawn with', routePoints.length, 'points')
    }
  }, [mapReady, routePoints])

  // 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
  useEffect(() => {
    if (mapRef.current) {
      mapRef.current.style.cursor = isAddingPoint ? 'crosshair' : 'grab'
      console.log('üñ±Ô∏è Cursor updated:', isAddingPoint ? 'crosshair' : 'grab')
    }
  }, [isAddingPoint])

  // 6. –°–º–µ–Ω–∞ —Å—Ç–∏–ª—è –∫–∞—Ä—Ç—ã
  const handleStyleChange = (newStyle: string) => {
    if (!mapInstance.current) return

    setCurrentStyle(newStyle)
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–∞–π–ª–æ–≤—ã–µ —Å–ª–æ–∏ –∏ —É–¥–∞–ª—è–µ–º –∏—Ö
    mapInstance.current.eachLayer((layer) => {
      if (layer instanceof L.TileLayer) {
        mapInstance.current?.removeLayer(layer)
      }
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å
    const style = MAP_STYLES[newStyle as keyof typeof MAP_STYLES]
    L.tileLayer(style.url, {
      attribution: style.attribution,
      maxZoom: 19
    }).addTo(mapInstance.current)
  }

  return (
    <div className="relative w-full h-full">
      {/* –°–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç–∏–ª–µ–π –∫–∞—Ä—Ç—ã */}
      <div className="absolute top-4 right-4 z-[1000] bg-white rounded-lg shadow-md border">
        <select
          value={currentStyle}
          onChange={(e) => handleStyleChange(e.target.value)}
          className="px-3 py-2 text-sm border-none rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          {Object.entries(MAP_STYLES).map(([key, style]) => (
            <option key={key} value={key}>
              {style.name}
            </option>
          ))}
        </select>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
      <div className="absolute top-16 left-4 z-[1000] bg-white rounded-lg shadow-md border px-3 py-2">
        <div className="text-sm">
          <div className="font-medium text-gray-900 mb-1">
            –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
          </div>
          <div className="text-gray-600">
            –ó–¥–∞–Ω–∏—è: {buildings.length} ‚Ä¢ –¢–æ—á–∫–∏: {routePoints.length}
          </div>
          <div className="text-xs text-gray-500 mt-1">
            –ö–∞—Ä—Ç–∞: {mapReady ? '‚úÖ –ì–æ—Ç–æ–≤–∞' : '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...'}
          </div>
          {isAddingPoint && (
            <div className="text-green-600 font-medium mt-1">
              üéØ –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            </div>
          )}
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã */}
      <div 
        ref={mapRef} 
        className="w-full h-full"
        style={{ 
          minHeight: '400px',
          cursor: isAddingPoint ? 'crosshair' : 'grab'
        }}
      />
    </div>
  )
}